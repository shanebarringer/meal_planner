package actions

import (
	"errors"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/shanebarringer/meal_planner/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Ingredient)
// DB Table: Plural (ingredients)
// Resource: Plural (Ingredients)
// Path: Plural (/ingredients)
// View Template Folder: Plural (/templates/ingredients/)

// IngredientsResource is the resource for the Ingredient model
type IngredientsResource struct {
	buffalo.Resource
}

// List gets all Ingredients. This function is mapped to the path
// GET /ingredients
func (v IngredientsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	ingredients := &models.Ingredients{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Ingredients from the DB
	if err := q.All(ingredients); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, ingredients))
}

// Show gets the data for one Ingredient. This function is mapped to
// the path GET /ingredients/{ingredient_id}
func (v IngredientsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Ingredient
	ingredient := &models.Ingredient{}

	// To find the Ingredient the parameter ingredient_id is used.
	if err := tx.Find(ingredient, c.Param("ingredient_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, ingredient))
}

// Create adds a Ingredient to the DB. This function is mapped to the
// path POST /ingredients
func (v IngredientsResource) Create(c buffalo.Context) error {
	// Allocate an empty Ingredient
	ingredient := &models.Ingredient{}

	// Bind ingredient to the html form elements
	if err := c.Bind(ingredient); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ingredient)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, ingredient))
	}

	// and redirect to the ingredients index page
	return c.Render(201, r.Auto(c, ingredient))
}

// Update changes a Ingredient in the DB. This function is mapped to
// the path PUT /ingredients/{ingredient_id}
func (v IngredientsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Ingredient
	ingredient := &models.Ingredient{}

	if err := tx.Find(ingredient, c.Param("ingredient_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Ingredient to the html form elements
	if err := c.Bind(ingredient); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(ingredient)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, ingredient))
	}

	// and redirect to the ingredients index page
	return c.Render(200, r.Auto(c, ingredient))
}

// Destroy deletes a Ingredient from the DB. This function is mapped
// to the path DELETE /ingredients/{ingredient_id}
func (v IngredientsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Ingredient
	ingredient := &models.Ingredient{}

	// To find the Ingredient the parameter ingredient_id is used.
	if err := tx.Find(ingredient, c.Param("ingredient_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(ingredient); err != nil {
		return err
	}

	// Redirect to the ingredients index page
	return c.Render(200, r.Auto(c, ingredient))
}
